//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Scripts/UI/UIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIControls"",
    ""maps"": [
        {
            ""name"": ""EscapeMenu"",
            ""id"": ""60ae8e91-2878-41a9-9a62-78f8e2e47387"",
            ""actions"": [
                {
                    ""name"": ""ChangeActive"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b830f44f-67c9-46b2-9c4a-25d064b711ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press""
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fab907d4-d9af-4416-becd-7490e66d4874"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // EscapeMenu
        m_EscapeMenu = asset.FindActionMap("EscapeMenu", throwIfNotFound: true);
        m_EscapeMenu_ChangeActive = m_EscapeMenu.FindAction("ChangeActive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EscapeMenu
    private readonly InputActionMap m_EscapeMenu;
    private IEscapeMenuActions m_EscapeMenuActionsCallbackInterface;
    private readonly InputAction m_EscapeMenu_ChangeActive;
    public struct EscapeMenuActions
    {
        private @UIControls m_Wrapper;
        public EscapeMenuActions(@UIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeActive => m_Wrapper.m_EscapeMenu_ChangeActive;
        public InputActionMap Get() { return m_Wrapper.m_EscapeMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EscapeMenuActions set) { return set.Get(); }
        public void SetCallbacks(IEscapeMenuActions instance)
        {
            if (m_Wrapper.m_EscapeMenuActionsCallbackInterface != null)
            {
                @ChangeActive.started -= m_Wrapper.m_EscapeMenuActionsCallbackInterface.OnChangeActive;
                @ChangeActive.performed -= m_Wrapper.m_EscapeMenuActionsCallbackInterface.OnChangeActive;
                @ChangeActive.canceled -= m_Wrapper.m_EscapeMenuActionsCallbackInterface.OnChangeActive;
            }
            m_Wrapper.m_EscapeMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeActive.started += instance.OnChangeActive;
                @ChangeActive.performed += instance.OnChangeActive;
                @ChangeActive.canceled += instance.OnChangeActive;
            }
        }
    }
    public EscapeMenuActions @EscapeMenu => new EscapeMenuActions(this);
    public interface IEscapeMenuActions
    {
        void OnChangeActive(InputAction.CallbackContext context);
    }
}
